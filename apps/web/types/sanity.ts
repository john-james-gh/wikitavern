/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch"
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: "sanity.imagePalette"
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions"
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: "sanity.fileAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: "geopoint"
  lat?: number
  lng?: number
  alt?: number
}

export type SiteSettings = {
  _id: string
  _type: "siteSettings"
  _createdAt: string
  _updatedAt: string
  _rev: string
  siteTitle?: string
  patreonLink?: string
  aboutText?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  footerText?: string
}

export type Tag = {
  _id: string
  _type: "tag"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
}

export type Page = {
  _id: string
  _type: "page"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  seo?: Seo
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }>
  category?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "category"
  }
  requestedCategory?: string
  tags?: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "tag"
  }>
  requestedTags?: Array<string>
  publishedAt?: string
  updatedAt?: string
  featured?: boolean
  submittedBy?: {
    userId?: string
    username?: string
  }
}

export type Category = {
  _id: string
  _type: "category"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  description?: string
}

export type SanityImageCrop = {
  _type: "sanity.imageCrop"
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot"
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: "sanity.imageAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData"
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata"
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Seo = {
  _type: "seo"
  title?: string
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  noIndex?: boolean
}

export type Slug = {
  _type: "slug"
  current?: string
  source?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | SiteSettings
  | Tag
  | Page
  | Category
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Seo
  | Slug
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: lib/sanity/queries.ts
// Variable: PAGE_QUERY
// Query: *[_type == "page" && slug.current == $slug][0]{  _id,  title,  slug,  "seo": {    "title": coalesce(seo.title, title, ""),    "description": coalesce(seo.description,  ""),    "image": seo.image,    "noIndex": seo.noIndex == true  },  content,  category->{_id, title, slug},  tags[]->{_id, title, slug},  publishedAt,  updatedAt}
export type PAGE_QUERYResult = {
  _id: string
  title: string | null
  slug: Slug | null
  seo: {
    title: string | ""
    description: string | ""
    image: {
      asset?: {
        _ref: string
        _type: "reference"
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: "image"
    } | null
    noIndex: boolean | false
  }
  content: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: "span"
      _key: string
    }>
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal"
    listItem?: "bullet" | "number"
    markDefs?: Array<{
      href?: string
      _type: "link"
      _key: string
    }>
    level?: number
    _type: "block"
    _key: string
  }> | null
  category: {
    _id: string
    title: null
    slug: Slug | null
  } | null
  tags: Array<{
    _id: string
    title: null
    slug: Slug | null
  }> | null
  publishedAt: string | null
  updatedAt: string | null
} | null
// Variable: PAGES_SLUGS_QUERY
// Query: *[_type == "page" && defined(slug.current)]{  title,  "slug": slug.current,}
export type PAGES_SLUGS_QUERYResult = Array<{
  title: string | null
  slug: string | null
}>
// Variable: FEATURED_PAGES_QUERY
// Query: *[  _type == "page"   && defined(slug.current)  && featured == true ] | order(publishedAt desc)[0...6]{  _id,  title,  slug,  updatedAt}
export type FEATURED_PAGES_QUERYResult = Array<{
  _id: string
  title: string | null
  slug: Slug | null
  updatedAt: string | null
}>
// Variable: RECENTLY_UPDATED_PAGES_QUERY
// Query: *[  _type == "page"  && defined(slug.current)] | order(updatedAt desc)[0...6]{  _id,  title,  slug,  updatedAt}
export type RECENTLY_UPDATED_PAGES_QUERYResult = Array<{
  _id: string
  title: string | null
  slug: Slug | null
  updatedAt: string | null
}>
// Variable: SITEMAP_QUERY
// Query: *[_type in ["page", "post"] && defined(slug.current)] {      "href": select(        _type == "page" => "/" + slug.current,        _type == "post" => "/posts/" + slug.current,        slug.current      ),      _updatedAt  }
export type SITEMAP_QUERYResult = Array<{
  href: string | null
  _updatedAt: string
}>

// Query TypeMap
import "@sanity/client"
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "page" && slug.current == $slug][0]{\n  _id,\n  title,\n  slug,\n  "seo": {\n    "title": coalesce(seo.title, title, ""),\n    "description": coalesce(seo.description,  ""),\n    "image": seo.image,\n    "noIndex": seo.noIndex == true\n  },\n  content,\n  category->{_id, title, slug},\n  tags[]->{_id, title, slug},\n  publishedAt,\n  updatedAt\n}': PAGE_QUERYResult
    '*[_type == "page" && defined(slug.current)]{\n  title,\n  "slug": slug.current,\n}': PAGES_SLUGS_QUERYResult
    '*[\n  _type == "page" \n  && defined(slug.current)\n  && featured == true \n] | order(publishedAt desc)[0...6]{\n  _id,\n  title,\n  slug,\n  updatedAt\n}': FEATURED_PAGES_QUERYResult
    '*[\n  _type == "page"\n  && defined(slug.current)\n] | order(updatedAt desc)[0...6]{\n  _id,\n  title,\n  slug,\n  updatedAt\n}': RECENTLY_UPDATED_PAGES_QUERYResult
    '\n  *[_type in ["page", "post"] && defined(slug.current)] {\n      "href": select(\n        _type == "page" => "/" + slug.current,\n        _type == "post" => "/posts/" + slug.current,\n        slug.current\n      ),\n      _updatedAt\n  }\n  ': SITEMAP_QUERYResult
  }
}
